{"mappings":"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","sources":["public/api.js"],"sourcesContent":["// API Configuration\nconsole.log(\"--- api.js started ---\");\nconst API_BASE_URL = window.location.origin;\nconst WS_URL = window.location.origin.replace(/^http/, 'ws'); // Convert http:// to ws://\n\nconst API_ENDPOINTS = {\n    getState: `${API_BASE_URL}/api/state`,\n    saveState: `${API_BASE_URL}/api/state`,\n    health: `${API_BASE_URL}/api/health`,\n    controlLight: `${API_BASE_URL}/api/lights/control` // <-- ADD THIS LINE\n};\n\n// WebSocket connection\nlet ws = null;\nlet reconnectInterval = null;\nlet reconnectAttempts = 0;\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 3000; // 3 seconds\n\n// Callback for when state is updated from server\nlet onStateUpdateCallback = null;\n\n// Initialize WebSocket connection\nfunction initWebSocket() {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n        return; // Already connected\n    }\n    \n    console.log('🔌 Connecting to WebSocket...');\n    ws = new WebSocket(WS_URL);\n    \n    ws.onopen = () => {\n        console.log('✅ WebSocket connected - Real-time sync enabled!');\n        reconnectAttempts = 0;\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    };\n    \n    ws.onmessage = (event) => {\n        try {\n            const data = JSON.parse(event.data);\n            \n            if (data.type === 'state_update' || data.type === 'initial_state') {\n                console.log('📨 Received state update from server');\n                \n                // Call the callback if it's set\n                if (onStateUpdateCallback && typeof onStateUpdateCallback === 'function') {\n                    onStateUpdateCallback(data.state);\n                }\n            }\n        } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n        }\n    };\n    \n    ws.onerror = (error) => {\n        console.error('❌ WebSocket error:', error);\n    };\n    \n    ws.onclose = () => {\n        console.log('🔌 WebSocket disconnected');\n        \n        // Attempt to reconnect\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n            reconnectAttempts++;\n            console.log(`⏳ Reconnecting... (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\n            \n            if (!reconnectInterval) {\n                reconnectInterval = setTimeout(() => {\n                    initWebSocket();\n                }, RECONNECT_DELAY);\n            }\n        } else {\n            console.log('⚠️ Max reconnection attempts reached. Please refresh the page.');\n        }\n    };\n}\n\n// API Helper Functions\nconst API = {\n    // Load state from server\n    async loadState() {\n        try {\n            const response = await fetch(API_ENDPOINTS.getState);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.success) {\n                return data.state;\n            } else {\n                throw new Error(data.error || 'Failed to load state');\n            }\n        } catch (error) {\n            console.error('Error loading state from API:', error);\n            return null;\n        }\n    },\n\n    // Save state to server (this will trigger WebSocket broadcast to other clients)\n    async saveState(state) {\n        try {\n            const response = await fetch(API_ENDPOINTS.saveState, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(state)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to save state');\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving state to API:', error);\n            return false;\n        }\n    },\n\n    // Check if server is available\n    async checkHealth() {\n        try {\n            const response = await fetch(API_ENDPOINTS.health);\n            if (!response.ok) {\n                return false;\n            }\n            const data = await response.json();\n            return data.status === 'OK';\n        } catch (error) {\n            console.error('Health check failed:', error);\n            return false;\n        }\n    },\n    \n    // Set callback for when state updates are received\n    onStateUpdate(callback) {\n        onStateUpdateCallback = callback;\n    },\n    \n    // Initialize WebSocket connection\n    connect() {\n        initWebSocket();\n    },\n    \n    // Close WebSocket connection\n    disconnect() {\n        if (ws) {\n            ws.close();\n            ws = null;\n        }\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    }\n};\n\n// Auto-connect when page loads\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        API.connect();\n    });\n} else {\n    API.connect();\n}\n\n// Export for use in main script\nwindow.API = API;"],"names":[],"version":3,"file":"public.6129b314.js.map","sourceRoot":"../"}