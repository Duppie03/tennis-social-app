{"mappings":"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","sources":["<anon>","public/api.js"],"sourcesContent":["// API Configuration\nconsole.log(\"--- api.js started ---\");\nconst API_BASE_URL = window.location.origin;\nconst WS_URL = window.location.origin.replace(/^http/, 'ws'); // Convert http:// to ws://\nconst API_ENDPOINTS = {\n    getState: `${API_BASE_URL}/api/state`,\n    saveState: `${API_BASE_URL}/api/state`,\n    health: `${API_BASE_URL}/api/health`,\n    controlLight: `${API_BASE_URL}/api/lights/control` // <-- ADD THIS LINE\n};\n// WebSocket connection\nlet ws = null;\nlet reconnectInterval = null;\nlet reconnectAttempts = 0;\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 3000; // 3 seconds\n// Callback for when state is updated from server\nlet onStateUpdateCallback = null;\n// Initialize WebSocket connection\nfunction initWebSocket() {\n    if (ws && ws.readyState === WebSocket.OPEN) return; // Already connected\n    console.log(\"\\uD83D\\uDD0C Connecting to WebSocket...\");\n    ws = new WebSocket(WS_URL);\n    ws.onopen = ()=>{\n        console.log(\"\\u2705 WebSocket connected - Real-time sync enabled!\");\n        reconnectAttempts = 0;\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    };\n    ws.onmessage = (event)=>{\n        try {\n            const data = JSON.parse(event.data);\n            if (data.type === 'state_update' || data.type === 'initial_state') {\n                console.log(\"\\uD83D\\uDCE8 Received state update from server\");\n                // Call the callback if it's set\n                if (onStateUpdateCallback && typeof onStateUpdateCallback === 'function') onStateUpdateCallback(data.state);\n            }\n        } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n        }\n    };\n    ws.onerror = (error)=>{\n        console.error(\"\\u274C WebSocket error:\", error);\n    };\n    ws.onclose = ()=>{\n        console.log(\"\\uD83D\\uDD0C WebSocket disconnected\");\n        // Attempt to reconnect\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n            reconnectAttempts++;\n            console.log(`\\u{23F3} Reconnecting... (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\n            if (!reconnectInterval) reconnectInterval = setTimeout(()=>{\n                initWebSocket();\n            }, RECONNECT_DELAY);\n        } else console.log(\"\\u26A0\\uFE0F Max reconnection attempts reached. Please refresh the page.\");\n    };\n}\n// API Helper Functions\nconst API = {\n    // Load state from server\n    async loadState () {\n        try {\n            const response = await fetch(API_ENDPOINTS.getState);\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            if (data.success) return data.state;\n            else throw new Error(data.error || 'Failed to load state');\n        } catch (error) {\n            console.error('Error loading state from API:', error);\n            return null;\n        }\n    },\n    // Save state to server (this will trigger WebSocket broadcast to other clients)\n    async saveState (state) {\n        try {\n            const response = await fetch(API_ENDPOINTS.saveState, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(state)\n            });\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            const data = await response.json();\n            if (!data.success) throw new Error(data.error || 'Failed to save state');\n            return true;\n        } catch (error) {\n            console.error('Error saving state to API:', error);\n            return false;\n        }\n    },\n    // Check if server is available\n    async checkHealth () {\n        try {\n            const response = await fetch(API_ENDPOINTS.health);\n            if (!response.ok) return false;\n            const data = await response.json();\n            return data.status === 'OK';\n        } catch (error) {\n            console.error('Health check failed:', error);\n            return false;\n        }\n    },\n    // Set callback for when state updates are received\n    onStateUpdate (callback) {\n        onStateUpdateCallback = callback;\n    },\n    // Initialize WebSocket connection\n    connect () {\n        initWebSocket();\n    },\n    // Close WebSocket connection\n    disconnect () {\n        if (ws) {\n            ws.close();\n            ws = null;\n        }\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    }\n};\n// Auto-connect when page loads\nif (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', ()=>{\n    API.connect();\n});\nelse API.connect();\n// Export for use in main script\nwindow.API = API;\n\n//# sourceMappingURL=public.5a01e69a.js.map\n","// API Configuration\nconsole.log(\"--- api.js started ---\");\nconst API_BASE_URL = window.location.origin;\nconst WS_URL = window.location.origin.replace(/^http/, 'ws'); // Convert http:// to ws://\n\nconst API_ENDPOINTS = {\n    getState: `${API_BASE_URL}/api/state`,\n    saveState: `${API_BASE_URL}/api/state`,\n    health: `${API_BASE_URL}/api/health`,\n    controlLight: `${API_BASE_URL}/api/lights/control` // <-- ADD THIS LINE\n};\n\n// WebSocket connection\nlet ws = null;\nlet reconnectInterval = null;\nlet reconnectAttempts = 0;\nconst MAX_RECONNECT_ATTEMPTS = 5;\nconst RECONNECT_DELAY = 3000; // 3 seconds\n\n// Callback for when state is updated from server\nlet onStateUpdateCallback = null;\n\n// Initialize WebSocket connection\nfunction initWebSocket() {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n        return; // Already connected\n    }\n    \n    console.log('üîå Connecting to WebSocket...');\n    ws = new WebSocket(WS_URL);\n    \n    ws.onopen = () => {\n        console.log('‚úÖ WebSocket connected - Real-time sync enabled!');\n        reconnectAttempts = 0;\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    };\n    \n    ws.onmessage = (event) => {\n        try {\n            const data = JSON.parse(event.data);\n            \n            if (data.type === 'state_update' || data.type === 'initial_state') {\n                console.log('üì® Received state update from server');\n                \n                // Call the callback if it's set\n                if (onStateUpdateCallback && typeof onStateUpdateCallback === 'function') {\n                    onStateUpdateCallback(data.state);\n                }\n            }\n        } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n        }\n    };\n    \n    ws.onerror = (error) => {\n        console.error('‚ùå WebSocket error:', error);\n    };\n    \n    ws.onclose = () => {\n        console.log('üîå WebSocket disconnected');\n        \n        // Attempt to reconnect\n        if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {\n            reconnectAttempts++;\n            console.log(`‚è≥ Reconnecting... (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);\n            \n            if (!reconnectInterval) {\n                reconnectInterval = setTimeout(() => {\n                    initWebSocket();\n                }, RECONNECT_DELAY);\n            }\n        } else {\n            console.log('‚ö†Ô∏è Max reconnection attempts reached. Please refresh the page.');\n        }\n    };\n}\n\n// API Helper Functions\nconst API = {\n    // Load state from server\n    async loadState() {\n        try {\n            const response = await fetch(API_ENDPOINTS.getState);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (data.success) {\n                return data.state;\n            } else {\n                throw new Error(data.error || 'Failed to load state');\n            }\n        } catch (error) {\n            console.error('Error loading state from API:', error);\n            return null;\n        }\n    },\n\n    // Save state to server (this will trigger WebSocket broadcast to other clients)\n    async saveState(state) {\n        try {\n            const response = await fetch(API_ENDPOINTS.saveState, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(state)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || 'Failed to save state');\n            }\n            \n            return true;\n        } catch (error) {\n            console.error('Error saving state to API:', error);\n            return false;\n        }\n    },\n\n    // Check if server is available\n    async checkHealth() {\n        try {\n            const response = await fetch(API_ENDPOINTS.health);\n            if (!response.ok) {\n                return false;\n            }\n            const data = await response.json();\n            return data.status === 'OK';\n        } catch (error) {\n            console.error('Health check failed:', error);\n            return false;\n        }\n    },\n    \n    // Set callback for when state updates are received\n    onStateUpdate(callback) {\n        onStateUpdateCallback = callback;\n    },\n    \n    // Initialize WebSocket connection\n    connect() {\n        initWebSocket();\n    },\n    \n    // Close WebSocket connection\n    disconnect() {\n        if (ws) {\n            ws.close();\n            ws = null;\n        }\n        if (reconnectInterval) {\n            clearInterval(reconnectInterval);\n            reconnectInterval = null;\n        }\n    }\n};\n\n// Auto-connect when page loads\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        API.connect();\n    });\n} else {\n    API.connect();\n}\n\n// Export for use in main script\nwindow.API = API;"],"names":["console","log","API_BASE_URL","window","location","origin","WS_URL","replace","API_ENDPOINTS","getState","saveState","health","controlLight","ws","reconnectInterval","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","RECONNECT_DELAY","onStateUpdateCallback","initWebSocket","readyState","WebSocket","OPEN","onopen","clearInterval","onmessage","event","data","JSON","parse","type","state","error","onerror","onclose","setTimeout","API","loadState","response","fetch","ok","Error","status","json","success","method","headers","body","stringify","checkHealth","onStateUpdate","callback","connect","disconnect","close","document","addEventListener"],"version":3,"file":"public.5a01e69a.js.map","sourceRoot":"../"}